// src/bot/index.js
require('dotenv').config();
const { Telegraf, session, Scenes } = require('telegraf');
const { Pool } = require('pg');
const path = require('path');
const fs = require('fs');
const axios = require('axios');

// Import services
const languageHandler = require('../services/languageHandler');
const currencyConverter = require('../services/currencyConverter');
const productNormalizer = require('../services/productNormalizer');
const documentSourceHandler = require('../services/documentSourceHandler');
const expenseHandlers = require('../handlers/expenseManagementHandlers');
const expenseDuplicateHandler = require('../handlers/expenseDuplicateHandler');

// Initialize database
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

// Initialize bot
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// Set up session middleware
bot.use(session());

// Import scenes
const addExpenseScene = require('./scenes/addExpenseScene');
const viewExpensesScene = require('./scenes/viewExpensesScene');
const settingsScene = require('./scenes/settingsScene');
const receiptProcessingScene = require('./scenes/receiptProcessingScene');
const utilityBillScene = require('./scenes/utilityBillScene');

// Create scene manager
const stage = new Scenes.Stage([
  addExpenseScene,
  viewExpensesScene,
  settingsScene,
  receiptProcessingScene,
  utilityBillScene
]);
bot.use(stage.middleware());

// Middleware to ensure user is registered
bot.use(async (ctx, next) => {
  try {
    const userId = ctx.from.id.toString();
    
    // Check if user exists
    const userResult = await pool.query(
      'SELECT * FROM users WHERE user_id = $1',
      [userId]
    );
    
    if (userResult.rows.length === 0) {
      // Create new user
      await pool.query(`
        INSERT INTO users (
          user_id, first_name, username, join_date, 
          time_zone, currency, language
        ) 
        VALUES ($1, $2, $3, NOW(), $4, $5, $6)
      `, [
        userId,
        ctx.from.first_name || 'User',
        ctx.from.username || null,
        'UTC',
        'EUR',
        ctx.from.language_code || 'en'
      ]);
      
      ctx.session = {
        userId,
        language: ctx.from.language_code || 'en',
        currency: 'EUR',
        isNewUser: true
      };
    } else {
      // Set session data
      ctx.session = {
        userId,
        language: userResult.rows[0].preferred_language || ctx.from.language_code || 'en',
        currency: userResult.rows[0].currency || 'EUR',
        isNewUser: false
      };
    }
    
    return next();
  } catch (error) {
    console.error('User registration middleware error:', error);
    return next();
  }
});

// Multilingual response middleware
bot.use(async (ctx, next) => {
  // Extend context with translation helper
  ctx.i18n = async (englishText, russianText = null) => {
    return await languageHandler.formatUserMessage(
      ctx.session.userId,
      englishText,
      russianText
    );
  };
  
  return next();
});

// Start command
bot.start(async (ctx) => {
  if (ctx.session.isNewUser) {
    await ctx.reply(await ctx.i18n(
      'üëã Welcome to Personal Finance Tracker! I\'ll help you track and analyze your expenses.',
      'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Personal Finance Tracker! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã.'
    ));
    
    // Start onboarding
    await ctx.reply(await ctx.i18n(
      'Let\'s set up your profile. What currency would you like to use? (e.g., EUR, USD, RUB)',
      '–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, EUR, USD, RUB)'
    ));
    
    ctx.session.onboardingStep = 'currency';
  } else {
    await ctx.reply(await ctx.i18n(
      'üëã Welcome back to Personal Finance Tracker!',
      'üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ Personal Finance Tracker!'
    ));
    
    // Show main menu
    await showMainMenu(ctx);
  }
});

// Help command
bot.help(async (ctx) => {
  const helpText = await ctx.i18n(
    `Here's what I can do:
    
/add - Add a new expense
/view - View recent expenses
/settings - Adjust your preferences
/report - Generate expense reports
/stats - View spending statistics

You can also send me a photo of a receipt to scan it automatically, or just tell me about an expense in natural language.`,

    `–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:
    
/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥
/view - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
/settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
/report - –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
/stats - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ä–∞—Å—Ö–æ–¥–µ –Ω–∞ –æ–±—ã—á–Ω–æ–º —è–∑—ã–∫–µ.`
  );
  
  await ctx.reply(helpText);
});

// Add expense command
bot.command('add', (ctx) => ctx.scene.enter('addExpense'));

// View expenses command
bot.command('view', (ctx) => ctx.scene.enter('viewExpenses'));

// Settings command
bot.command('settings', (ctx) => ctx.scene.enter('settings'));

// Process receipt photos
bot.on('photo', (ctx) => ctx.scene.enter('receiptProcessing'));

// Process document uploads (PDFs)
bot.on('document', async (ctx) => {
  // Check if document is a PDF or image
  const mime = ctx.message.document.mime_type;
  
  if (mime.startsWith('image/') || mime === 'application/pdf') {
    await ctx.reply(await ctx.i18n(
      'I\'ll process this document for you.',
      '–Ø –æ–±—Ä–∞–±–æ—Ç–∞—é —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –≤–∞—Å.'
    ));
    
    ctx.scene.enter('receiptProcessing', { documentId: ctx.message.document.file_id });
  } else {
    await ctx.reply(await ctx.i18n(
      'I can only process images and PDF documents.',
      '–Ø –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã.'
    ));
  }
});

// Natural language expense entry
bot.on('text', async (ctx) => {
  // Skip if inside a scene
  if (ctx.session?.__scenes?.current) return;
  
  // Skip if in onboarding
  if (ctx.session.onboardingStep) {
    await handleOnboarding(ctx);
    return;
  }
  
  // Detect if the text might be an expense
  const text = ctx.message.text;
  
  if (looksLikeExpense(text)) {
    await ctx.reply(await ctx.i18n(
      'This looks like an expense. Let me process it...',
      '–ü–æ—Ö–æ–∂–µ –Ω–∞ —Ä–∞—Å—Ö–æ–¥. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...'
    ));
    
    // Process the potential expense
    await processNaturalLanguageExpense(ctx, text);
  } else {
    await ctx.reply(await ctx.i18n(
      'I\'m not sure what you want to do. Try using a command like /add or /help.',
      '–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, /add –∏–ª–∏ /help.'
    ));
  }
});

// Error handling
bot.catch((err, ctx) => {
  console.error(`Bot error for ${ctx.updateType}`, err);
  ctx.reply('An error occurred. Please try again later.').catch(e => {});
});

/**
 * Show main menu with inline keyboard
 * @param {Object} ctx - Telegram context
 */
async function showMainMenu(ctx) {
  await ctx.reply(
    await ctx.i18n('What would you like to do?', '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?'),
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: await ctx.i18n('‚ûï Add Expense', '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'), callback_data: 'add_expense' },
            { text: await ctx.i18n('üìã View Expenses', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'), callback_data: 'view_expenses' }
          ],
          [
            { text: await ctx.i18n('üìä Reports', 'üìä –û—Ç—á–µ—Ç—ã'), callback_data: 'reports' },
            { text: await ctx.i18n('‚öôÔ∏è Settings', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'), callback_data: 'settings' }
          ]
        ]
      }
    }
  );
}

/**
 * Handle user onboarding steps
 * @param {Object} ctx - Telegram context
 */
async function handleOnboarding(ctx) {
  const text = ctx.message.text;
  
  switch (ctx.session.onboardingStep) {
    case 'currency':
      // Validate and save currency
      const currency = text.trim().toUpperCase();
      
      if (/^[A-Z]{3}$/.test(currency)) {
        // Update user preference
        await pool.query(
          'UPDATE users SET currency = $1 WHERE user_id = $2',
          [currency, ctx.session.userId]
        );
        
        ctx.session.currency = currency;
        
        // Move to language step
        await ctx.reply(await ctx.i18n(
          'Great! Now, what language would you prefer? (en for English, ru for Russian)',
          '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –∫–∞–∫–æ–π —è–∑—ã–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? (en –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, ru –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ)'
        ));
        
        ctx.session.onboardingStep = 'language';
      } else {
        await ctx.reply(await ctx.i18n(
          'Please enter a valid 3-letter currency code (e.g., EUR, USD, RUB).',
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π 3-–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, EUR, USD, RUB).'
        ));
      }
      break;
      
    case 'language':
      // Validate and save language
      const language = text.trim().toLowerCase();
      
      if (language === 'en' || language === 'ru') {
        // Update user preference
        await pool.query(
          'UPDATE users SET preferred_language = $1 WHERE user_id = $2',
          [language, ctx.session.userId]
        );
        
        ctx.session.language = language;
        
        // Finish onboarding
        await ctx.reply(await ctx.i18n(
          'Perfect! Your profile is set up. You can change these settings anytime with /settings.',
          '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é /settings.'
        ));
        
        delete ctx.session.onboardingStep;
        ctx.session.isNewUser = false;
        
        // Show main menu
        await showMainMenu(ctx);
      } else {
        await ctx.reply(await ctx.i18n(
          'Please enter a valid language code (en or ru).',
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞ (