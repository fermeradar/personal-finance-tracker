name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "Cleaning npm cache..."
          npm cache clean --force
          
          echo "Removing existing node_modules and package-lock.json..."
          rm -rf node_modules package-lock.json
          
          echo "Installing dependencies..."
          npm install --no-audit --no-fund --legacy-peer-deps
          
          echo "Verifying installation..."
          npm list --depth=0 || true
          
          echo "Checking for missing dependencies..."
          if [ ! -f "package-lock.json" ]; then
            echo "Error: package-lock.json was not generated"
            exit 1
          fi

      - name: Run SonarQube analysis
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=personal-finance-tracker
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.test.inclusions=tests/**/*.test.js
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov-report/lcov.info
            -Dsonar.coverage.exclusions=tests/**/*,config/**/*,scripts/**/*
            -Dsonar.organization=fermeradar
            -Dsonar.host.url=https://sonarcloud.io

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "Cleaning npm cache..."
          npm cache clean --force
          
          echo "Removing existing node_modules and package-lock.json..."
          rm -rf node_modules package-lock.json
          
          echo "Installing dependencies..."
          npm install --no-audit --no-fund --legacy-peer-deps
          
          echo "Verifying installation..."
          npm list --depth=0 || true
          
          echo "Checking for missing dependencies..."
          if [ ! -f "package-lock.json" ]; then
            echo "Error: package-lock.json was not generated"
            exit 1
          fi

      - name: Run security audit
        run: |
          echo "Running security audit..."
          npm audit
          
          echo "Checking for critical and high vulnerabilities..."
          AUDIT_RESULT=$(npm audit --json)
          CRITICAL=$(echo $AUDIT_RESULT | jq -r '.metadata.vulnerabilities.critical // 0')
          HIGH=$(echo $AUDIT_RESULT | jq -r '.metadata.vulnerabilities.high // 0')
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "Critical or high vulnerabilities found. Failing build."
            exit 1
          else
            echo "No critical or high vulnerabilities found. Continuing with moderate vulnerabilities."
          fi
          
      - name: Check for Snyk token
        id: check-snyk
        run: |
          if [ -n "${{ secrets.SNYK_TOKEN }}" ]; then
            echo "run_snyk=true" >> $GITHUB_OUTPUT
          else
            echo "run_snyk=false" >> $GITHUB_OUTPUT
            echo "::warning::Skipping Snyk security scan because SNYK_TOKEN is not provided"
          fi
      
      - name: Run Snyk security scan
        if: steps.check-snyk.outputs.run_snyk == 'true'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "Cleaning npm cache..."
          npm cache clean --force
          
          echo "Removing existing node_modules and package-lock.json..."
          rm -rf node_modules package-lock.json
          
          echo "Installing dependencies..."
          npm install --no-audit --no-fund --legacy-peer-deps
          
          echo "Verifying installation..."
          npm list --depth=0 || true
          
          echo "Checking for missing dependencies..."
          if [ ! -f "package-lock.json" ]; then
            echo "Error: package-lock.json was not generated"
            exit 1
          fi

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_NAME: finance_tracker_test
          JWT_SECRET: test_secret

  deploy:
    needs: [code-quality, security, test]
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "Cleaning npm cache..."
          npm cache clean --force
          
          echo "Removing existing node_modules and package-lock.json..."
          rm -rf node_modules package-lock.json
          
          echo "Installing dependencies..."
          npm install --no-audit --no-fund --legacy-peer-deps
          
          echo "Verifying installation..."
          npm list --depth=0 || true
          
          echo "Checking for missing dependencies..."
          if [ ! -f "package-lock.json" ]; then
            echo "Error: package-lock.json was not generated"
            exit 1
          fi

      - name: Run database migrations
        run: npm run migrate
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Deploy to production
        run: |
          # Add your deployment commands here
          echo "Deploying to production..."
        env:
          NODE_ENV: production
          PORT: ${{ secrets.PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Backup database
        run: |
          # Add your backup commands here
          echo "Backing up database..."
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Restore backup
        run: |
          # Add your restore commands here
          echo "Restoring backup..."
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Notify Status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = context.job.status;
            const message = status === 'success' 
              ? '✅ Operation completed successfully!' 
              : '❌ Operation failed!';
            
            // Only try to comment if this is a pull request
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `${message}\n\nOperation completed at ${new Date().toISOString()}`
              });
            }
            
            // For pushes to main, create a new issue with the status
            if (context.eventName === 'push' && context.ref === 'refs/heads/main') {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Deployment Status - ${new Date().toISOString()}`,
                body: `${message}\n\nOperation completed at ${new Date().toISOString()}\n\nTriggered by: ${context.actor}`
              });
            }
