name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_NAME: finance_tracker_test
          JWT_SECRET: test_secret

      - name: Run database migrations
        run: npm run migrate
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Deploy to production
        run: |
          # Add your deployment commands here
          echo "Deploying to production..."
        env:
          NODE_ENV: production
          PORT: ${{ secrets.PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Backup database
        run: |
          # Add your backup commands here
          echo "Backing up database..."
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Restore backup
        run: |
          # Add your restore commands here
          echo "Restoring backup..."
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Notify Status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = context.job.status;
            const message = status === 'success' 
              ? '✅ Operation completed successfully!' 
              : '❌ Operation failed!';
            
            // Only try to comment if this is a pull request
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `${message}\n\nOperation completed at ${new Date().toISOString()}`
              });
            }
            
            // For pushes to main, create a new issue with the status
            if (context.eventName === 'push' && context.ref === 'refs/heads/main') {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Deployment Status - ${new Date().toISOString()}`,
                body: `${message}\n\nOperation completed at ${new Date().toISOString()}\n\nTriggered by: ${context.actor}`
              });
            }
